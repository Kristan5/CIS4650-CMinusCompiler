/*
  Created by: Indeep Farma, Kristen Samaroo
  File Name: cm.cup
  To Build: java java_cup.Main < cm.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
// import java_cup.runtime.*;
import absyn.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* ------------- ------------- TERMINALS ------------- ------------- */

terminal String ID, NUM;
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, DIVIDE, LT, LTE, GT, GTE, EQEQ, NOTEQ, EQ;
terminal SEMI, COMMA, LPAREN, RPAREN, LSQBRAC, RSQBRAC,LBRAC,RBRAC;
terminal ERROR;

/* ------------- ------------- NON-TERMINALS ------------- ------------- */
   
non terminal Dec decl, fun_decl;
non terminal DecList program, decl_list;

non terminal Var var;
non terminal VarDec param, var_decl, params;
non terminal VarDecList param_list, local_decls;

non terminal Type type;

non terminal Exp stmt, expr_stmt, compound_stmt, selection_stmt, iteration_stmt, return_stmt;
non terminal Exp simple_expr, additive_expr;
non terminal Exp relop, mulop, addop, term, factor; // NOT SURE IF THIS IS CORRECT TYPE
non terminal Exp expr, call; // NOT SURE IF THIS IS CORRECT TYPE
non terminal ExpList stmt_list, args, arg_list;

/* ---------------------------- ----------------------------*/

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left ELSE;

/* ----------------------------Grammar Section-------------------- */

start with program;

program        ::=   decl_list:decList
               ;

decl_list     ::= decl_list:d1 decl:d2 
               | decl:d
               ;

decl           ::= var_decl:i
                  | fun_decl:r
                  ;

var_decl    ::= type:t ID:i SEMI
              | type:t ID:i LSQBRAC NUM:n RSQBRAC SEMI
              ;

type           ::= INT:i
                  | VOID:v
                  ;

fun_decl    ::= type:t ID:i LPAREN params:p RPAREN compound_stmt:c
               ;

params       ::= param_list:pl 
               | VOID:v 
              ;

param_list  ::= param_list:pl COMMA param:p
             | param:p 
             ;

param       ::= type:t ID:i
              | type:t ID:i LSQBRAC RSQBRAC
               ;

compound_stmt        ::= LBRAC:c local_decls:l stmt_list:s RBRAC
                     ;

local_decls           ::= local_decls:l var_decl:v
                        | 
                        ;

stmt_list   ::= stmt_list:l stmt:s
              | 
              ;

stmt         ::= expr_stmt:es
               | compound_stmt:cs
               | selection_stmt:ss
               | iteration_stmt:is
               | return_stmt:rs
               ;

expr_stmt      ::= expr:e SEMI
                 | SEMI:s
                  ;

selection_stmt    ::= IF LPAREN expr:e RPAREN stmt:s
                    | IF LPAREN expr:e RPAREN stmt:s ELSE stmt:se
                    ;

iteration_stmt       ::= WHILE:w LPAREN expr:e RPAREN stmt:s
                        ;

return_stmt          ::= RETURN:r expr:e SEMI
                       | RETURN:r SEMI
                     ;

expr         ::= var:v EQ expr:e
                | simple_expr:se
               ;

var         ::= ID:i
               | ID:i LSQBRAC expr:e RSQBRAC
               ;

simple_expr    ::= additive_expr:ae1 relop:r additive_expr:ae2
                | additive_expr
               ;

relop       ::=  expr:e1 EQEQ expr:e2
                | expr:e1 NOTEQ expr:e2
                | expr:e1 LTE expr:e2
                | expr:e1 GTE expr:e2
                | expr:e1 LT expr:e2
                | expr:e1 GT expr:e2
               ;

additive_expr  ::= additive_expr:ae addop:a term:t 
                 | term:t
               ;

addop    ::= PLUS
            | MINUS
            ;

term     ::= term:t mulop:m factor:f
            | factor:f
            ;

mulop    ::= TIMES
            | DIVIDE
            ;

factor      ::= LPAREN expr:e RPAREN
             | var:v
             | call:c
             | NUM:n
            ;

// call        ::= ID:i LPAREN args:a RPAREN
//                ;

args        ::= arg_list:al
               |
               ;

arg_list   ::= arg_list:al COMMA expr:e
               | expr:e
               ;
